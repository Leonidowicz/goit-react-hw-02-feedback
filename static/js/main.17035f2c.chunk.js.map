{"version":3,"sources":["Components/Section/Section.jsx","Components/FeedbackOptions/FeedbackOptions.js","Components/Statistics/Statistics.js","Components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","className","map","elem","onClick","e","name","type","Statistics","good","neutral","bad","total","percent","Notification","message","App","state","handelIncrement","target","setState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAAaA,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC7B,OAAQ,qCAAE,4BAAID,IAAWC,MCDhBC,EAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBACzC,OACE,qBAAKC,UAAU,UAAf,SACGF,EAAQG,KAAI,SAACC,GAAD,OACX,wBAAQC,QAAS,SAACC,GAAD,OAAOL,EAAgBK,IAAIC,KAAMH,EAAMI,KAAK,SAA7D,SACGJ,UCLEK,EAAa,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACtD,OACE,gCACE,6CACA,8BACG,CAAC,QADJ,UACoBJ,KAEpB,8BACG,CAAC,WADJ,UACuBC,KAEvB,8BACG,CAAC,OADJ,UACmBC,KAEnB,sDAAyBC,KACzB,yDAEGA,EAAQ,EAAIC,EAAU,EAFzB,WCdOC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC7B,OAAO,4BAAIA,KCiDEC,E,4MA1CbC,MAAQ,CAAER,KAAM,EAAGC,QAAS,EAAGC,IAAK,G,EAEpCO,gBAAkB,YAA2B,IAAdZ,EAAa,EAAvBa,OAAUb,KAC7B,EAAKc,SAAL,eAAiBd,EAAO,EAAKW,MAAMX,GAAQ,K,EAG7Ce,mBAAqB,WACnB,MAA+B,EAAKJ,MACpC,OADA,EAAQR,KAAR,EAAcC,QAAd,EAAuBC,K,EAIzBW,gCAAkC,eAACV,EAAD,uDAAS,EAAKS,qBAAd,OAChCE,KAAKC,MAAO,EAAKP,MAAMR,KAAOG,EAAS,M,4CAEzC,WACE,MAA+Ba,KAAKR,MAA5BR,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBC,EAAQa,KAAKJ,qBACbR,EAAUY,KAAKH,kCACrB,OACE,qBAAKrB,UAAU,MAAf,SACE,eAAC,EAAD,CAASA,UAAU,aAAaL,MAAM,wBAAtC,UACE,cAAC,EAAD,CACEG,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiByB,KAAKP,kBAEb,IAAVN,EACC,cAAC,EAAD,CAAcG,QAAQ,sBAEtB,cAAC,EAAD,CACEN,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,QAASA,a,GAlCLa,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.17035f2c.chunk.js","sourcesContent":["export const Section = ({ title, children }) => {\r\n    return (<><p>{title}</p>{children}</>);\r\n    }\r\n\r\n","export const FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <div className=\"buttons\">\r\n      {options.map((elem) => (\r\n        <button onClick={(e) => onLeaveFeedback(e)} name={elem} type=\"button\">\r\n          {elem}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","export const Statistics = ({ good, neutral, bad, total, percent }) => {\r\n  return (\r\n    <div>\r\n      <h2>Statistics:</h2>\r\n      <p>\r\n        {['good']}:&ensp;{good}\r\n      </p>\r\n      <p>\r\n        {['neutral']}:&ensp;{neutral}\r\n      </p>\r\n      <p>\r\n        {['bad']}:&ensp;{bad}\r\n      </p>\r\n      <p>Total Feedback:&ensp;{total}</p>\r\n      <p>\r\n        Positive Feedback:&ensp;\r\n        {total > 0 ? percent : 0}%\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n","export const Notification = ({ message }) => {\r\n  return <p>{message}</p>;\r\n};\r\n","import { Component } from 'react';\nimport './App.scss';\nimport { Section } from './Components/Section/Section';\nimport { FeedbackOptions } from './Components/FeedbackOptions/FeedbackOptions.js';\nimport { Statistics } from './Components/Statistics/Statistics.js';\nimport { Notification } from './Components/Notification/Notification.js';\n\nclass App extends Component {\n  state = { good: 0, neutral: 0, bad: 0 };\n\n  handelIncrement = ({ target: { name } }) => {\n    this.setState({ [name]: this.state[name] + 1 });\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = (total = this.countTotalFeedback()) =>\n    Math.round((this.state.good / total) * 100);\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const percent = this.countPositiveFeedbackPercentage();\n    return (\n      <div className=\"App\">\n        <Section className=\"App-header\" title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={['good', 'neutral', 'bad']}\n            onLeaveFeedback={this.handelIncrement}\n          />\n          {total === 0 ? (\n            <Notification message=\"No feedback given\" />\n          ) : (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              percent={percent}\n            />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}